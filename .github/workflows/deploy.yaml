name: Development

on:
  workflow_call:
    inputs:
      aws-account-id:
        required: true
        type: string
      application-name:
        required: true
        type: string
      environment:
        required: true
        type: string

env:
  GIT_CREDENTIALS: ${{ secrets.GIT_CREDENTIALS }}
  ENVIRONMENT: ${{ inputs.environment }}
  ECR_REPOSITORY: ${{ inputs.application-name }}-${{ inputs.environment }}

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/github-actions-${{ inputs.environment }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        id: docker
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg AWS_ELASTICACHE_REDIS_ENDPOINT=${{ secrets.AWS_ELASTICACHE_REDIS_ENDPOINT }} \
          --build-arg AWS_ELASTICACHE_REDIS_WITH_SSL=true \
          --build-arg ENVIRONMENT=${{ inputs.environment }} \
          --build-arg POSTGRESQL_PASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' \
          --build-arg POSTGRESQL_URL=${{ secrets.POSTGRESQL_URL }} \
          --build-arg POSTGRESQL_USERNAME=${{ secrets.POSTGRESQL_USERNAME }} .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update EC2 instances
        run: |
          INSTANCE_INFO=$(aws ec2 describe-instances --filters "Name=tag:Category,Values=application" "Name=tag:Name,Values=java-app-instance*" --query "Reservations[*].Instances[*].[InstanceId,PublicIpAddress]" --output text)

          echo "Instance info: $INSTANCE_IDS"

          IMAGE_URI="${{ steps.docker.outputs.image }}"
          
          echo "IMAGE_URI: $IMAGE_URI"
          
          echo "${{ secrets.EC2_SSH_KEY_PEM }}" > ec2_key.pem
          
          chmod 600 ec2.pem
          
          while read -r INSTANCE_ID PUBLIC_IP; do
            if [[ -n "$PUBLIC_IP" ]]; then  # Ensure PUBLIC_IP is not empty
              echo "Updating instance $INSTANCE_ID with IP $PUBLIC_IP..."
              ssh -o StrictHostKeyChecking=no -i "ec2.pem" ec2-user@$PUBLIC_IP << EOF
              echo 'Running setup script on instance $INSTANCE_ID...'
              ./setup.sh
              echo 'Pulling image: $IMAGE_URI'
              docker pull $IMAGE_URI
              echo 'Stopping and removing old container...'
              docker stop address_api || true
              docker rm address_api || true
              echo 'Running new container...'
              docker run --name address_api -d -p 8080:8080 $IMAGE_URI
          EOF
            else
              echo "No public IP found for instance $INSTANCE_ID. Skipping..."
            fi
          done <<< "$INSTANCE_INFO"
          
          rm ec2.pem